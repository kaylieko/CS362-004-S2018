        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:int compare(const void* a, const void* b) {
   126896:   10:  if (*(int*)a > *(int*)b)
    #####:   11:    return 1;
   126896:   12:  if (*(int*)a < *(int*)b)
    45320:   13:    return -1;
    81576:   14:  return 0;
   126896:   15:}
        -:   16:
        -:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
        -:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        -:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
     3000:   45:  SelectStream(1);
     3000:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
     6000:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
     3000:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
    66000:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
   660000:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
   570000:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
   300000:   66:        }
    30000:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
     3000:   74:  if (numPlayers == 2)
        -:   75:    {
      956:   76:      state->supplyCount[curse] = 10;
      956:   77:    }
     2044:   78:  else if (numPlayers == 3)
        -:   79:    {
     1024:   80:      state->supplyCount[curse] = 20;
     1024:   81:    }
        -:   82:  else
        -:   83:    {
     1020:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
     3000:   88:  if (numPlayers == 2)
        -:   89:    {
      956:   90:      state->supplyCount[estate] = 8;
      956:   91:      state->supplyCount[duchy] = 8;
      956:   92:      state->supplyCount[province] = 8;
      956:   93:    }
        -:   94:  else
        -:   95:    {
     2044:   96:      state->supplyCount[estate] = 12;
     2044:   97:      state->supplyCount[duchy] = 12;
     2044:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
     3000:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     3000:  103:  state->supplyCount[silver] = 40;
     3000:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
   126000:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
   990000:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
   465000:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
    57000:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
     6000:  116:		  if (numPlayers == 2){ 
     1912:  117:		    state->supplyCount[i] = 8; 
     1912:  118:		  }
     4088:  119:		  else{ state->supplyCount[i] = 12; }
     6000:  120:		}
        -:  121:	      else
        -:  122:		{
    24000:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
    30000:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
   435000:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
   435000:  131:	}
        -:  132:
    60000:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
    24128:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
     9064:  141:      state->deckCount[i] = 0;
    72512:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
    27192:  144:	  state->deck[i][j] = estate;
    27192:  145:	  state->deckCount[i]++;
    27192:  146:	}
   145024:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
    63448:  149:	  state->deck[i][j] = copper;
    63448:  150:	  state->deckCount[i]++;		
    63448:  151:	}
     9064:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
    24128:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
     9064:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
     9064:  161:    }
        -:  162:
        -:  163:  //draw player hands
    24128:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
     9064:  167:      state->handCount[i] = 0;
     9064:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
     9064:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
   168000:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
    81000:  179:      state->embargoTokens[i] = 0;
    81000:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
     3000:  183:  state->outpostPlayed = 0;
     3000:  184:  state->phase = 0;
     3000:  185:  state->numActions = 1;
     3000:  186:  state->numBuys = 1;
     3000:  187:  state->playedCardCount = 0;
     3000:  188:  state->whoseTurn = 0;
     3000:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
    36000:  193:  for (it = 0; it < 5; it++){
    15000:  194:    drawCard(state->whoseTurn, state);
    15000:  195:  }
        -:  196:
     3000:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
     3000:  199:  return 0;
     3000:  200:}
        -:  201:
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
     9190:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
     9190:  210:  if (state->deckCount[player] < 1)
      115:  211:    return -1;
     9075:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
   199452:  215:  while (state->deckCount[player] > 0) {
    90651:  216:    card = floor(Random() * state->deckCount[player]);
    90651:  217:    newDeck[newDeckPos] = state->deck[player][card];
    90651:  218:    newDeckPos++;
   632462:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
   225580:  220:      state->deck[player][i] = state->deck[player][i+1];
   225580:  221:    }
    90651:  222:    state->deckCount[player]--;
        -:  223:  }
   199452:  224:  for (i = 0; i < newDeckPos; i++) {
    90651:  225:    state->deck[player][i] = newDeck[i];
    90651:  226:    state->deckCount[player]++;
    90651:  227:  }
        -:  228:
     9075:  229:  return 0;
     9190:  230:}
        -:  231:
        -:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
    #####:  270:  return 0;
    #####:  271:}
        -:  272:
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
    #####:  281:  who = state->whoseTurn;
        -:  282:
    #####:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
    #####:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
    #####:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
    #####:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
    #####:  300:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
    #####:  309:  return 0;
    #####:  310:}
        -:  311:
        -:  312:int numHandCards(struct gameState *state) {
    #####:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
        -:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:  int currentPlayer = whoseTurn(state);
    #####:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
        -:  321:int supplyCount(int card, struct gameState *state) {
    #####:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
    #####:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
    #####:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
    #####:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
        -:  347:int whoseTurn(struct gameState *state) {
     3000:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
        -:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
    #####:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
    #####:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  360:  }
    #####:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
    #####:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
    #####:  371:  state->outpostPlayed = 0;
    #####:  372:  state->phase = 0;
    #####:  373:  state->numActions = 1;
    #####:  374:  state->coins = 0;
    #####:  375:  state->numBuys = 1;
    #####:  376:  state->playedCardCount = 0;
    #####:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
    #####:  381:  for (k = 0; k < 5; k++){
    #####:  382:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  383:  }
        -:  384:
        -:  385:  //Update money
    #####:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
    #####:  388:  return 0;
        -:  389:}
        -:  390:
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
    #####:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
    #####:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
    #####:  402:  j = 0;
    #####:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
    #####:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
    #####:  407:	  j++;
    #####:  408:	}
    #####:  409:    }
    #####:  410:  if ( j >= 3)
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
    #####:  415:  return 0;
    #####:  416:}
        -:  417:
        -:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
    #####:  421:  int score = 0;
        -:  422:  //score from hand
    #####:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
    #####:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  428:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  431:    }
        -:  432:
        -:  433:  //score from discard
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
    #####:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  439:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  442:    }
        -:  443:
        -:  444:  //score from deck
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
    #####:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  450:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  453:    }
        -:  454:
    #####:  455:  return score;
        -:  456:}
        -:  457:
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
    #####:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
    #####:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
    #####:  485:	}
    #####:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
    #####:  496:	}
    #####:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
    #####:  506:	}
    #####:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
    #####:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
    #####:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
    24819:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
      116:  534:    for (i = 0; i < state->discardCount[player];i++){
    #####:  535:      state->deck[player][i] = state->discard[player][i];
    #####:  536:      state->discard[player][i] = -1;
    #####:  537:    }
        -:  538:
       58:  539:    state->deckCount[player] = state->discardCount[player];
       58:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
       58:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
       58:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
       58:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
       58:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
       58:  560:    if (deckCounter == 0)
       58:  561:      return -1;
        -:  562:
    #####:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  564:    state->deckCount[player]--;
    #####:  565:    state->handCount[player]++;//Increment hand count
    #####:  566:  }
        -:  567:
        -:  568:  else{
    24761:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
    24761:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
    24761:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    24761:  577:    state->deckCount[player]--;
    24761:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
    24761:  581:  return 0;
    24819:  582:}
        -:  583:
        -:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
    #####:  645:}
        -:  646:
        -:  647://Assignment #2, Refactor 'Adventurer'
        -:  648:int adventurerEffect(int currentPlayer, struct gameState *state){
        -:  649:  int cardDrawn;
     1000:  650:  int drawntreasure = 0;
     1000:  651:  int z = 0;
        -:  652:  int temphand[MAX_HAND];
    17638:  653:  while(drawntreasure < 2) {
        -:  654:    //if the deck is empty we need to shuffle discard and add to deck
        -:  655:    //*Introduce a Bug: Instead of shuffling discard empty deck, this will result shuffle the deck with 1 or 0 card
     7819:  656:    if (state->deckCount[currentPlayer] < 2) {
       68:  657:      shuffle(currentPlayer, state);
       68:  658:    }
     7819:  659:    drawCard(currentPlayer, state);
     7819:  660:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    21429:  661:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
     2000:  662:      drawntreasure++;
     2000:  663:    }
        -:  664:    else{
     5819:  665:      temphand[z] = cardDrawn;
     5819:  666:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     5819:  667:      z++;
        -:  668:    }
        -:  669:  }
    13638:  670:  while(z - 1 >= 0) {
     5819:  671:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
     5819:  672:    z = z - 1;
        -:  673:  }
     1000:  674:  return 0;
        -:  675:}
        -:  676:
        -:  677:
        -:  678://Assignment #2, Refactor 'Smithy'
        -:  679:int smithyEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  680:{
        -:  681:  int i;
        -:  682:  //+3 cards
        -:  683:  //*Introduce a Bug: Draw +4 cards instead of +3
    #####:  684:  for (i = 0; i < 4; i++) {
    #####:  685:    drawCard(currentPlayer, state);
    #####:  686:  }  
        -:  687:  //discard card from hand
    #####:  688:  discardCard(handPos, currentPlayer, state, 0);
    #####:  689:  return 0;
        -:  690:}
        -:  691:
        -:  692:
        -:  693://Assignment #2, Refactor 'Counsil_Room'
        -:  694:int counsil_RoomEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  695:{
        -:  696:  int i;
        -:  697:
        -:  698:  //+4 Cards
    #####:  699:  for (i = 0; i < 4; i++)
        -:  700:  {
    #####:  701:    drawCard(currentPlayer, state);
    #####:  702:  }   
        -:  703:
        -:  704:  //Buy +1
    #####:  705:  state->numBuys++;
        -:  706:
        -:  707:  //Each other player draws a card
    #####:  708:  for (i = 0; i < state->numPlayers; i++)
        -:  709:  {
    #####:  710:    if ( i != currentPlayer )
        -:  711:    {
    #####:  712:      drawCard(i, state);
    #####:  713:    }
    #####:  714:  }     
        -:  715:  //put played card in played card pile
        -:  716:  //*Introduce a Bug: Trash a card from hand instead of discard
    #####:  717:  discardCard(handPos, currentPlayer, state, 1);      
    #####:  718:  return 0;
        -:  719:}
        -:  720:
        -:  721:
        -:  722://Assignment #2, Refactor 'Village'
        -:  723:int villageEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  724:{
        -:  725:  //+1 Card
     1000:  726:  drawCard(currentPlayer, state); 
        -:  727:
        -:  728:  //+2 Actions
     1000:  729:  state->numActions = state->numActions + 2; 
        -:  730:
        -:  731:  //discard played card from hand
        -:  732:  
     1000:  733:  discardCard(handPos, currentPlayer, state, 0);
     1000:  734:  return 0;
        -:  735:}
        -:  736:
        -:  737:
        -:  738://Assignment #2, Refactor 'Great_Hall'
        -:  739:int great_HallEffect(int currentPlayer, struct gameState *state, int handPos){
        -:  740:  //+1 Card
     1000:  741:  drawCard(currentPlayer, state); 
        -:  742:
        -:  743:  //+1 Actions
        -:  744:  //*Introduce a Bug: gain +2 actions instead of +1
     1000:  745:  state->numActions = state->numActions + 2;     
        -:  746:
        -:  747:  //discard card from hand
     1000:  748:  discardCard(handPos, currentPlayer, state, 0);
     1000:  749:  return 0;
        -:  750:}
        -:  751:
        -:  752:
        -:  753:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  754:{
        -:  755:  int i;
        -:  756:  int j;
        -:  757:  int k;
        -:  758:  int x;
        -:  759:  int index;
     3000:  760:  int currentPlayer = whoseTurn(state);
     3000:  761:  int nextPlayer = currentPlayer + 1;
        -:  762:
     3000:  763:  int tributeRevealedCards[2] = {-1, -1};
        -:  764:  int temphand[MAX_HAND];// moved above the if statement
        -:  765:  //int drawntreasure=0; //moved into adventurerEffect function
        -:  766:  //int cardDrawn;       //moved into adventurerEffect function
        -:  767:  //int z = 0;           //moved into adventurerEffect function
     3000:  768:  if (nextPlayer > (state->numPlayers - 1)){
      368:  769:    nextPlayer = 0;
      368:  770:  }
        -:  771:  
        -:  772:	
        -:  773:  //uses switch to select card and perform actions
     3000:  774:  switch( card ) 
        -:  775:  {
        -:  776:    case adventurer:
        -:  777:      //call the adventurer card effect function
     1000:  778:      adventurerEffect(currentPlayer, state);
     1000:  779:      return 0;
        -:  780:		
        -:  781:    case smithy:
        -:  782:      //call the smithy card effect function
    #####:  783:      smithyEffect(currentPlayer, state, handPos);
    #####:  784:      return 0;
        -:  785:
        -:  786:    case council_room:
        -:  787:      //call the counsil_room card effect function
    #####:  788:      counsil_RoomEffect(currentPlayer, state, handPos);
    #####:  789:      return 0;
        -:  790:      
        -:  791:    case village:
        -:  792:      //call the village card effect function
     1000:  793:      villageEffect (currentPlayer, state, handPos);
     1000:  794:      return 0;  
        -:  795:			
        -:  796:    case great_hall:
        -:  797:      //call the great_hall card effect function
     1000:  798:      great_HallEffect (currentPlayer, state, handPos);
     1000:  799:      return 0;
        -:  800:
        -:  801:    case feast:
        -:  802:      //gain card with cost up to 5
        -:  803:      //Backup hand
    #####:  804:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  805:      	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  806:      	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  807:      }
        -:  808:      //Backup hand
        -:  809:
        -:  810:      //Update Coins for Buy
    #####:  811:      updateCoins(currentPlayer, state, 5);
    #####:  812:      x = 1;//Condition to loop on
    #####:  813:      while( x == 1) {//Buy one card
    #####:  814:	if (supplyCount(choice1, state) <= 0){
        -:  815:	  if (DEBUG)
        -:  816:	    printf("None of that card left, sorry!\n");
        -:  817:
        -:  818:	  if (DEBUG){
        -:  819:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  820:	  }
    #####:  821:	}
    #####:  822:	else if (state->coins < getCost(choice1)){
    #####:  823:	  printf("That card is too expensive!\n");
        -:  824:
        -:  825:	  if (DEBUG){
        -:  826:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  827:	  }
    #####:  828:	}
        -:  829:	else{
        -:  830:
        -:  831:	  if (DEBUG){
        -:  832:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  833:	  }
        -:  834:
    #####:  835:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  836:	  x = 0;//No more buying cards
        -:  837:
        -:  838:	  if (DEBUG){
        -:  839:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  840:	  }
        -:  841:
        -:  842:	}
        -:  843:      }     
        -:  844:
        -:  845:      //Reset Hand
    #####:  846:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  847:	state->hand[currentPlayer][i] = temphand[i];
    #####:  848:	temphand[i] = -1;
    #####:  849:      }
        -:  850:      //Reset Hand
        -:  851:      			
    #####:  852:      return 0;
        -:  853:			
        -:  854:    case gardens:
    #####:  855:      return -1;
        -:  856:			
        -:  857:    case mine:
    #####:  858:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  859:
    #####:  860:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:		
    #####:  865:      if (choice2 > treasure_map || choice2 < curse)
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 2, currentPlayer);
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
    #####:  886:	      break;
        -:  887:	    }
    #####:  888:	}
        -:  889:			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case remodel:
    #####:  893:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  894:
    #####:  895:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  896:	{
    #####:  897:	  return -1;
        -:  898:	}
        -:  899:
    #####:  900:      gainCard(choice2, state, 0, currentPlayer);
        -:  901:
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
        -:  904:
        -:  905:      //discard trashed card
    #####:  906:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  907:	{
    #####:  908:	  if (state->hand[currentPlayer][i] == j)
        -:  909:	    {
    #####:  910:	      discardCard(i, currentPlayer, state, 0);			
    #####:  911:	      break;
        -:  912:	    }
    #####:  913:	}
        -:  914:
        -:  915:
    #####:  916:      return 0;
        -:  917:		
        -:  918:    
        -:  919:		
        -:  920:    
        -:  921:		
        -:  922:    case baron:
    #####:  923:      state->numBuys++;//Increase buys by 1!
    #####:  924:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  925:	int p = 0;//Iterator for hand!
    #####:  926:	int card_not_discarded = 1;//Flag for discard set!
    #####:  927:	while(card_not_discarded){
    #####:  928:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  929:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  930:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  931:	    state->discardCount[currentPlayer]++;
    #####:  932:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  933:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  934:	    }
    #####:  935:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  936:	    state->handCount[currentPlayer]--;
    #####:  937:	    card_not_discarded = 0;//Exit the loop
    #####:  938:	  }
    #####:  939:	  else if (p > state->handCount[currentPlayer]){
        -:  940:	    if(DEBUG) {
        -:  941:	      printf("No estate cards in your hand, invalid choice\n");
        -:  942:	      printf("Must gain an estate if there are any\n");
        -:  943:	    }
    #####:  944:	    if (supplyCount(estate, state) > 0){
    #####:  945:	      gainCard(estate, state, 0, currentPlayer);
    #####:  946:	      state->supplyCount[estate]--;//Decrement estates
    #####:  947:	      if (supplyCount(estate, state) == 0){
    #####:  948:		isGameOver(state);
    #####:  949:	      }
    #####:  950:	    }
    #####:  951:	    card_not_discarded = 0;//Exit the loop
    #####:  952:	  }
        -:  953:			    
        -:  954:	  else{
    #####:  955:	    p++;//Next card
        -:  956:	  }
        -:  957:	}
    #####:  958:      }
        -:  959:			    
        -:  960:      else{
    #####:  961:	if (supplyCount(estate, state) > 0){
    #####:  962:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  963:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  964:	  if (supplyCount(estate, state) == 0){
    #####:  965:	    isGameOver(state);
    #####:  966:	  }
    #####:  967:	}
        -:  968:      }
        -:  969:	    
        -:  970:      
    #####:  971:      return 0;
        -:  972:		
        -:  973:    
        -:  974:		
        -:  975:    case minion:
        -:  976:      //+1 action
    #####:  977:      state->numActions++;
        -:  978:			
        -:  979:      //discard card from hand
    #####:  980:      discardCard(handPos, currentPlayer, state, 0);
        -:  981:			
    #####:  982:      if (choice1)		//+2 coins
        -:  983:	{
    #####:  984:	  state->coins = state->coins + 2;
    #####:  985:	}
        -:  986:			
    #####:  987:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  988:	{
        -:  989:	  //discard hand
    #####:  990:	  while(numHandCards(state) > 0)
        -:  991:	    {
    #####:  992:	      discardCard(handPos, currentPlayer, state, 0);
        -:  993:	    }
        -:  994:				
        -:  995:	  //draw 4
    #####:  996:	  for (i = 0; i < 4; i++)
        -:  997:	    {
    #####:  998:	      drawCard(currentPlayer, state);
    #####:  999:	    }
        -: 1000:				
        -: 1001:	  //other players discard hand and redraw if hand size > 4
    #####: 1002:	  for (i = 0; i < state->numPlayers; i++)
        -: 1003:	    {
    #####: 1004:	      if (i != currentPlayer)
        -: 1005:		{
    #####: 1006:		  if ( state->handCount[i] > 4 )
        -: 1007:		    {
        -: 1008:		      //discard hand
    #####: 1009:		      while( state->handCount[i] > 0 )
        -: 1010:			{
    #####: 1011:			  discardCard(handPos, i, state, 0);
        -: 1012:			}
        -: 1013:							
        -: 1014:		      //draw 4
    #####: 1015:		      for (j = 0; j < 4; j++)
        -: 1016:			{
    #####: 1017:			  drawCard(i, state);
    #####: 1018:			}
    #####: 1019:		    }
    #####: 1020:		}
    #####: 1021:	    }
        -: 1022:				
    #####: 1023:	}
    #####: 1024:      return 0;
        -: 1025:		
        -: 1026:    case steward:
    #####: 1027:      if (choice1 == 1)
        -: 1028:	{
        -: 1029:	  //+2 cards
    #####: 1030:	  drawCard(currentPlayer, state);
    #####: 1031:	  drawCard(currentPlayer, state);
    #####: 1032:	}
    #####: 1033:      else if (choice1 == 2)
        -: 1034:	{
        -: 1035:	  //+2 coins
    #####: 1036:	  state->coins = state->coins + 2;
    #####: 1037:	}
        -: 1038:      else
        -: 1039:	{
        -: 1040:	  //trash 2 cards in hand
    #####: 1041:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1042:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1043:	}
        -: 1044:			
        -: 1045:      //discard card from hand
    #####: 1046:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1047:      return 0;
        -: 1048:		
        -: 1049:    case tribute:
    #####: 1050:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1051:	if (state->deckCount[nextPlayer] > 0){
    #####: 1052:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	  state->deckCount[nextPlayer]--;
    #####: 1054:	}
    #####: 1055:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1056:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1057:	  state->discardCount[nextPlayer]--;
    #####: 1058:	}
        -: 1059:	else{
        -: 1060:	  //No Card to Reveal
        -: 1061:	  if (DEBUG){
        -: 1062:	    printf("No cards to reveal\n");
        -: 1063:	  }
        -: 1064:	}
    #####: 1065:      }
        -: 1066:	    
        -: 1067:      else{
    #####: 1068:	if (state->deckCount[nextPlayer] == 0){
    #####: 1069:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1070:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1071:	    state->deckCount[nextPlayer]++;
    #####: 1072:	    state->discard[nextPlayer][i] = -1;
    #####: 1073:	    state->discardCount[nextPlayer]--;
    #####: 1074:	  }
        -: 1075:			    
    #####: 1076:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1077:	} 
    #####: 1078:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
    #####: 1081:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
        -: 1084:      }    
        -: 1085:		       
    #####: 1086:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1087:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1088:	state->playedCardCount++;
    #####: 1089:	tributeRevealedCards[1] = -1;
    #####: 1090:      }
        -: 1091:
    #####: 1092:      for (i = 0; i <= 2; i ++){
    #####: 1093:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1094:	  state->coins += 2;
    #####: 1095:	}
        -: 1096:		    
    #####: 1097:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1098:	  drawCard(currentPlayer, state);
    #####: 1099:	  drawCard(currentPlayer, state);
    #####: 1100:	}
        -: 1101:	else{//Action Card
    #####: 1102:	  state->numActions = state->numActions + 2;
        -: 1103:	}
    #####: 1104:      }
        -: 1105:	    
    #####: 1106:      return 0;
        -: 1107:		
        -: 1108:    case ambassador:
    #####: 1109:      j = 0;		//used to check if player has enough cards to discard
        -: 1110:
    #####: 1111:      if (choice2 > 2 || choice2 < 0)
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
    #####: 1116:      if (choice1 == handPos)
        -: 1117:	{
    #####: 1118:	  return -1;
        -: 1119:	}
        -: 1120:
    #####: 1121:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1122:	{
    #####: 1123:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1124:	    {
    #####: 1125:	      j++;
    #####: 1126:	    }
    #####: 1127:	}
    #####: 1128:      if (j < choice2)
        -: 1129:	{
    #####: 1130:	  return -1;				
        -: 1131:	}
        -: 1132:
        -: 1133:      if (DEBUG) 
        -: 1134:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1135:
        -: 1136:      //increase supply count for choosen card by amount being discarded
    #####: 1137:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1138:			
        -: 1139:      //each other player gains a copy of revealed card
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
        -: 1143:	    {
    #####: 1144:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1145:	    }
    #####: 1146:	}
        -: 1147:
        -: 1148:      //discard played card from hand
    #####: 1149:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1150:
        -: 1151:      //trash copies of cards returned to supply
    #####: 1152:      for (j = 0; j < choice2; j++)
        -: 1153:	{
    #####: 1154:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1155:	    {
    #####: 1156:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1157:		{
    #####: 1158:		  discardCard(i, currentPlayer, state, 1);
    #####: 1159:		  break;
        -: 1160:		}
    #####: 1161:	    }
    #####: 1162:	}			
        -: 1163:
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case cutpurse:
        -: 1167:
    #####: 1168:      updateCoins(currentPlayer, state, 2);
    #####: 1169:      for (i = 0; i < state->numPlayers; i++)
        -: 1170:	{
    #####: 1171:	  if (i != currentPlayer)
        -: 1172:	    {
    #####: 1173:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1174:		{
    #####: 1175:		  if (state->hand[i][j] == copper)
        -: 1176:		    {
    #####: 1177:		      discardCard(j, i, state, 0);
    #####: 1178:		      break;
        -: 1179:		    }
    #####: 1180:		  if (j == state->handCount[i])
        -: 1181:		    {
    #####: 1182:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1183:			{
        -: 1184:			  if (DEBUG)
        -: 1185:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1186:			}	
    #####: 1187:		      break;
        -: 1188:		    }		
    #####: 1189:		}
        -: 1190:					
    #####: 1191:	    }
        -: 1192:				
    #####: 1193:	}				
        -: 1194:
        -: 1195:      //discard played card from hand
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1197:
    #####: 1198:      return 0;
        -: 1199:
        -: 1200:		
        -: 1201:    case embargo: 
        -: 1202:      //+2 Coins
    #####: 1203:      state->coins = state->coins + 2;
        -: 1204:			
        -: 1205:      //see if selected pile is in play
    #####: 1206:      if ( state->supplyCount[choice1] == -1 )
        -: 1207:	{
    #####: 1208:	  return -1;
        -: 1209:	}
        -: 1210:			
        -: 1211:      //add embargo token to selected supply pile
    #####: 1212:      state->embargoTokens[choice1]++;
        -: 1213:			
        -: 1214:      //trash card
    #####: 1215:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1216:      return 0;
        -: 1217:		
        -: 1218:    case outpost:
        -: 1219:      //set outpost flag
    #####: 1220:      state->outpostPlayed++;
        -: 1221:			
        -: 1222:      //discard card
    #####: 1223:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1224:      return 0;
        -: 1225:		
        -: 1226:    case salvager:
        -: 1227:      //+1 buy
    #####: 1228:      state->numBuys++;
        -: 1229:			
    #####: 1230:      if (choice1)
        -: 1231:	{
        -: 1232:	  //gain coins equal to trashed card
    #####: 1233:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1234:	  //trash card
    #####: 1235:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1236:	}
        -: 1237:			
        -: 1238:      //discard card
    #####: 1239:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1240:      return 0;
        -: 1241:		
        -: 1242:    case sea_hag:
    #####: 1243:      for (i = 0; i < state->numPlayers; i++){
    #####: 1244:	if (i != currentPlayer){
    #####: 1245:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1246:	  state->discardCount[i]++;
    #####: 1247:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1248:	}
    #####: 1249:      }
    #####: 1250:      return 0;
        -: 1251:		
        -: 1252:    case treasure_map:
        -: 1253:      //search hand for another treasure_map
    #####: 1254:      index = -1;
    #####: 1255:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1256:	{
    #####: 1257:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1258:	    {
    #####: 1259:	      index = i;
    #####: 1260:	      break;
        -: 1261:	    }
    #####: 1262:	}
    #####: 1263:      if (index > -1)
        -: 1264:	{
        -: 1265:	  //trash both treasure cards
    #####: 1266:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1267:	  discardCard(index, currentPlayer, state, 1);
        -: 1268:
        -: 1269:	  //gain 4 Gold cards
    #####: 1270:	  for (i = 0; i < 4; i++)
        -: 1271:	    {
    #####: 1272:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1273:	    }
        -: 1274:				
        -: 1275:	  //return success
    #####: 1276:	  return 1;
        -: 1277:	}
        -: 1278:			
        -: 1279:      //no second treasure_map found in hand
    #####: 1280:      return -1;
        -: 1281:    }
        -: 1282:	
    #####: 1283:  return -1;
     3000: 1284:}
        -: 1285:
        -: 1286:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1287:{
        -: 1288:	
        -: 1289:  //if card is not trashed, added to Played pile 
     2000: 1290:  if (trashFlag < 1)
        -: 1291:    {
        -: 1292:      //add card to played pile
     2000: 1293:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     2000: 1294:      state->playedCardCount++;
     2000: 1295:    }
        -: 1296:	
        -: 1297:  //set played card to -1
     2000: 1298:  state->hand[currentPlayer][handPos] = -1;
        -: 1299:	
        -: 1300:  //remove card from player's hand
     2000: 1301:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1302:    {
        -: 1303:      //reduce number of cards in hand
    #####: 1304:      state->handCount[currentPlayer]--;
    #####: 1305:    }
     2000: 1306:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1307:    {
        -: 1308:      //reduce number of cards in hand
    #####: 1309:      state->handCount[currentPlayer]--;
    #####: 1310:    }
        -: 1311:  else 	
        -: 1312:    {
        -: 1313:      //replace discarded card with last card in hand
     2000: 1314:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1315:      //set last card to -1
     2000: 1316:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1317:      //reduce number of cards in hand
     2000: 1318:      state->handCount[currentPlayer]--;
        -: 1319:    }
        -: 1320:	
     2000: 1321:  return 0;
        -: 1322:}
        -: 1323:
        -: 1324:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1325:{
        -: 1326:  //Note: supplyPos is enum of choosen card
        -: 1327:	
        -: 1328:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1329:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1330:    {
    #####: 1331:      return -1;
        -: 1332:    }
        -: 1333:	
        -: 1334:  //added card for [whoseTurn] current player:
        -: 1335:  // toFlag = 0 : add to discard
        -: 1336:  // toFlag = 1 : add to deck
        -: 1337:  // toFlag = 2 : add to hand
        -: 1338:
    #####: 1339:  if (toFlag == 1)
        -: 1340:    {
    #####: 1341:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1342:      state->deckCount[player]++;
    #####: 1343:    }
    #####: 1344:  else if (toFlag == 2)
        -: 1345:    {
    #####: 1346:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1347:      state->handCount[player]++;
    #####: 1348:    }
        -: 1349:  else
        -: 1350:    {
    #####: 1351:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1352:      state->discardCount[player]++;
        -: 1353:    }
        -: 1354:	
        -: 1355:  //decrease number in supply pile
    #####: 1356:  state->supplyCount[supplyPos]--;
        -: 1357:	 
    #####: 1358:  return 0;
    #####: 1359:}
        -: 1360:
        -: 1361:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1362:{
        -: 1363:  int i;
        -: 1364:	
        -: 1365:  //reset coin count
     3000: 1366:  state->coins = 0;
        -: 1367:
        -: 1368:  //add coins for each Treasure card in player's hand
    36000: 1369:  for (i = 0; i < state->handCount[player]; i++)
        -: 1370:    {
    15000: 1371:      if (state->hand[player][i] == copper)
        -: 1372:	{
    12000: 1373:	  state->coins += 1;
    12000: 1374:	}
     3000: 1375:      else if (state->hand[player][i] == silver)
        -: 1376:	{
    #####: 1377:	  state->coins += 2;
    #####: 1378:	}
     3000: 1379:      else if (state->hand[player][i] == gold)
        -: 1380:	{
    #####: 1381:	  state->coins += 3;
    #####: 1382:	}	
    15000: 1383:    }	
        -: 1384:
        -: 1385:  //add bonus
     3000: 1386:  state->coins += bonus;
        -: 1387:
     3000: 1388:  return 0;
        -: 1389:}
        -: 1390:
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
        -: 1394:
