        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/************************************************************************
        -:    2:*	Assignment4 Hyejin Ko
        -:    3:*	randomtestcard1.c Great Hall
        -:    4:* 
        -:    5:*	randomtestcard1: randomtestcard1.c dominion.o rngs.o
        -:    6:*		gcc -o randomtestcard1 -g randomtestcard1.c dominion.o rngs.o $(CFLAGS)
        -:    7:************************************************************************/
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include <stdlib.h>
        -:   15:#include <math.h>
        -:   16:#include <time.h>
        -:   17:
        -:   18:#define TESTCARD "great_hall"
        -:   19:#define NUM_TESTS 1000
        -:   20:
        -:   21:void asserttrue (int test, int expect){
    20000:   22:	if (test == expect){
    11762:   23:		printf("--> [Test PASSED!]\n");
    11762:   24:	} 
        -:   25:	else {
     8238:   26:		printf("--> [Test FAILED!]\n");
        -:   27:	
        -:   28:	}
    20000:   29:}
        -:   30:
        -:   31:int main(){
        3:   32:	int seed = 1000;
        3:   33:	int thisPlayer = 0;
        3:   34:	int handPos = 0;
        3:   35:	int choice1 = 0;
        3:   36:	int choice2 = 0;
        3:   37:	int choice3 = 0;
        3:   38:	int playedCard = 1;		// 1 Great_hall card will be played
        3:   39:	int drawnCard = 1;		// increase player's handsize by drawing 1 card
        -:   40:
        3:   41:	int k[10] = {adventurer, smithy, council_room, village, great_hall, gardens, steward, feast, minion, embargo};
        -:   42:	
        -:   43:	struct gameState G, testG;
        -:   44:
        -:   45:	int i;
        -:   46:	int numPlayers;
        -:   47:	int expectedResult;
        -:   48:	//int numDeckCards;
        -:   49:	
        -:   50:
        3:   51:	printf ("\n=====================================================\n");
        3:   52:	printf ("	  RANDOM CARD TEST 1 Great Hall		\n");
        3:   53:	printf ("=====================================================\n");
        -:   54:
        3:   55:	srand(time(NULL));
     8007:   56:	for (i = 0; i < NUM_TESTS; i++){
        -:   57:		//random numPlayers (min.2 to max.4)
     4000:   58:		numPlayers = rand() % 3 + 2;
        -:   59:
        -:   60:		//initialize the game
     4000:   61:		initializeGame (numPlayers, k, seed, &G);
        -:   62:
        -:   63:		//random current player
     4000:   64:		thisPlayer = rand() % numPlayers;
        -:   65:		//printf("%d\n", thisPlayer);
        -:   66:
        -:   67:		//random number of cards in deck
     4000:   68:		G.deckCount[thisPlayer] = rand() % MAX_DECK;
        -:   69:
        -:   70:		//random number of cards in hand
     4000:   71:		G.handCount[thisPlayer] = rand() % MAX_HAND;
        -:   72:
        -:   73:		// at least one adventurer is present in current player's hand
     4000:   74:		G.hand[thisPlayer][0] = great_hall;
        -:   75:
        -:   76:		//copy gameState
     4000:   77:		memcpy(&testG, &G, sizeof(struct gameState));
        -:   78:
     4000:   79:		printf ("------------------------------------------------------------------------------------\n");
        -:   80:		//printf("Number of Actions this player originally has: %i\n", G.numActions);
        -:   81:		//printf("Deck1: %i \n", G.deckCount[thisPlayer]);
        -:   82:		//great_hall card effect	
     4000:   83:		cardEffect(great_hall, choice1, choice2, choice3, &testG, handPos, 0);
        -:   84:
        -:   85:		//printf("Deck2: %i \n", testG.deckCount[thisPlayer]);
        -:   86:		//check num of cards in hand, supposed to get +1(drawn)-1(played) after great_hall
     4000:   87:		expectedResult = G.handCount[thisPlayer] + drawnCard - playedCard;
     4000:   88:		printf ("[Test1] Expected cards in HAND: %d vs. Tested cards in HAND: %d ", expectedResult, testG.handCount[thisPlayer]);
     4000:   89:		asserttrue(testG.handCount[thisPlayer], expectedResult);
        -:   90:
        -:   91:		//check num of cards in deck, supposed to have -1
        -:   92:		//great_hall: player gets 1 card in hand from his deck
     4000:   93:		expectedResult = G.deckCount[thisPlayer] - 1;
     4000:   94:		printf ("[Test2] Expected cards in DECK: %d vs. Tested cards in DECK: %d ", expectedResult, testG.deckCount[thisPlayer]);
     4000:   95:		asserttrue(testG.deckCount[thisPlayer], expectedResult);
        -:   96:
        -:   97:		//check num of actions, supposed to get +1 after great_hall
     4000:   98:		printf ("[Test3] Expected numActions: %d vs. Tested numActions: %d ", G.numActions + 1, testG.numActions);
     4000:   99:		asserttrue(testG.numActions, G.numActions+ 1);
        -:  100:
        -:  101:		//check num of played card
     4000:  102:		printf ("[Test4] Expected playedCard: %d vs. Tested playedCard: %d ", G.playedCardCount + playedCard, testG.playedCardCount);
     4000:  103:		asserttrue(testG.playedCardCount, G.playedCardCount + playedCard);
        -:  104:
        -:  105:
        -:  106:
     4000:  107:	}
        4:  108:	return 0;
        -:  109:}
        -:  110:
        -:  111:
