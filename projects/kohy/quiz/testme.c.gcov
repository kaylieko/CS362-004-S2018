        -:    0:Source:testme.c
        -:    0:Graph:testme.gcno
        -:    0:Data:testme.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include<stdio.h>
        -:    2:#include<string.h>
        -:    3:#include<stdlib.h>
        -:    4:#include<time.h>
        -:    5:
function inputChar called 166759 returned 100% blocks executed 100%
        -:    6:char inputChar()
        -:    7:{
        -:    8:	// space to special character } 
        -:    9:	// space=32 to }=125
   333518:   10:	int range = 125 - 32 + 1;
   166759:   11:	int randNum = rand()%range + 32;
        -:   12:
        -:   13:	//convert a random number to a char type.
   166759:   14:    char randChar = (char) randNum;
        -:   15:
   166759:   16:    return randChar;
        -:   17:
        -:   18:}
        -:   19:
function inputString called 166759 returned 100% blocks executed 100%
        -:   20:char *inputString()
        -:   21:{
        -:   22:	int i;
   333518:   23:	int numPredefinedString = 5; //size of predefined string = 'reset'
   166759:   24:	char isString[numPredefinedString+1]; // C string with max. 5 chars + NULL terminator 
        -:   25:		
        -:   26:    //generate 5 random characters in a string
  2001108:   27:	for (i = 0; i < numPredefinedString; i++) {
branch  0 taken 83%
branch  1 taken 17%
        -:   28:		// a=97 to z=122
   833795:   29:		int range = 122 - 97 + 1;
   833795:   30:		int randNum = rand()%range + 97;
        -:   31:		// convert a random number to a char type.
   833795:   32:    	char randChar = (char) randNum;
   833795:   33:		isString[i] = randChar;
   833795:   34:	}
        -:   35:	//set the last character as trailing null
   166759:   36:	isString[5] = '\0';
        -:   37:
   166759:   38:    char *randString = isString;
   166759:   39:    return randString;
   166759:   40:}
        -:   41:
function testme called 1 returned 0% blocks executed 94%
        -:   42:void testme()
        -:   43:{
        2:   44:  int tcCount = 0;
        -:   45:  char *s;
        -:   46:  char c;
        1:   47:  int state = 0;
        -:   48:
   166759:   49:  while (1)
        -:   50:  {
   166759:   51:    tcCount++;
   166759:   52:    c = inputChar();
   166759:   53:    s = inputString();
   166759:   54:    printf("Iteration %d: c = %c, s = %s, state = %d\n", tcCount, c, s, state);
        -:   55:
   168548:   56:    if (c == '[' && state == 0) state = 1;
branch  0 taken 1%
branch  1 taken 99%
branch  2 taken 1%
branch  3 taken 99%
   168578:   57:    if (c == '(' && state == 1) state = 2;
branch  0 taken 1%
branch  1 taken 99%
branch  2 taken 1%
branch  3 taken 99%
   168534:   58:    if (c == '{' && state == 2) state = 3;
branch  0 taken 1%
branch  1 taken 99%
branch  2 taken 1%
branch  3 taken 99%
   168523:   59:    if (c == ' ' && state == 3) state = 4;
branch  0 taken 1%
branch  1 taken 99%
branch  2 taken 1%
branch  3 taken 99%
   168542:   60:    if (c == 'a' && state == 4) state = 5;
branch  0 taken 1%
branch  1 taken 99%
branch  2 taken 1%
branch  3 taken 99%
   168552:   61:    if (c == 'x' && state == 5) state = 6;
branch  0 taken 1%
branch  1 taken 99%
branch  2 taken 1%
branch  3 taken 99%
   168600:   62:    if (c == '}' && state == 6) state = 7;
branch  0 taken 1%
branch  1 taken 99%
branch  2 taken 1%
branch  3 taken 99%
   168548:   63:    if (c == ')' && state == 7) state = 8;
branch  0 taken 1%
branch  1 taken 99%
branch  2 taken 1%
branch  3 taken 99%
   168520:   64:    if (c == ']' && state == 8) state = 9;
branch  0 taken 1%
branch  1 taken 99%
branch  2 taken 1%
branch  3 taken 99%
        -:   65:    //string 'reset\0'
   173061:   66:    if (s[0] == 'r' && s[1] == 'e'
branch  0 taken 4%
branch  1 taken 96%
branch  2 taken 100%
branch  3 taken 0%
     6558:   67:       && s[2] == 's' && s[3] == 'e'
branch  0 taken 4%
branch  1 taken 96%
branch  2 taken 4%
branch  3 taken 96%
       11:   68:       && s[4] == 't' && s[5] == '\0'
branch  0 taken 11%
branch  1 taken 89%
branch  2 taken 100%
branch  3 taken 0%
        2:   69:       && state == 9)
branch  0 taken 100%
branch  1 taken 0%
        -:   70:    {
        1:   71:      printf("error ");
        1:   72:      exit(200);
        -:   73:    }
        -:   74:  }
    #####:   75:}
        -:   76:
        -:   77:
function main called 1 returned 100% blocks executed 100%
        -:   78:int main(int argc, char *argv[])
        -:   79:{
        1:   80:    srand(time(NULL));
        1:   81:    testme();
        1:   82:    return 0;
        -:   83:}
